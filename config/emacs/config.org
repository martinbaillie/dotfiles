#+TITLE: Literate Emacs Configuration
#+AUTHOR: Martin Baillie
#+EMAIL: martin@baillie.id
#+LANGUAGE: en
#+PROPERTY: header-args :tangle yes :cache yes :results silent :padline no

[[file:unicorn.jpg]]

* Table of Contents :TOC_2_gh:
- [[#personal][Personal]]
- [[#packages][Packages]]
  - [[#upstream][Upstream]]
  - [[#mine][Mine]]
- [[#uigeneral][UI/General]]
- [[#uimacos][UI/macOS]]
- [[#uilinux][UI/Linux]]
- [[#keysgeneral][Keys/General]]
- [[#keyslinux][Keys/Linux]]
- [[#keysmacos][Keys/macOS]]
- [[#package-customisation][Package Customisation]]
  - [[#org][org]]
  - [[#projectile][projectile]]
  - [[#direnv][direnv]]
  - [[#hl-todo][hl-todo]]
  - [[#format-all][format-all]]
  - [[#company][company]]
  - [[#go][go]]
  - [[#python][python]]
  - [[#nyanmode][nyanmode]]
  - [[#dired][dired]]
  - [[#avy][avy]]
  - [[#magit][magit]]
  - [[#yaml][yaml]]
  - [[#terraform][terraform]]
  - [[#pinentry][pinentry]]
  - [[#treemacs][treemacs]]
  - [[#easy-motion][easy-motion]]
  - [[#move-text][move-text]]
  - [[#buffer-move][buffer-move]]
  - [[#buffer-expose][buffer-expose]]
  - [[#golden-ratio][golden-ratio]]
  - [[#proced][proced]]
  - [[#vterm][vterm]]
  - [[#exwm][EXWM]]

* Personal
#+BEGIN_SRC elisp
(setq user-full-name "Martin Baillie"
      user-mail-address "martin@baillie.id"
      auth-sources '((:source "/etc/dotfiles/.private/authinfo.gpg")))
#+END_SRC
* Packages
** Upstream
#+BEGIN_SRC elisp :tangle packages.el
(package! dap-mode)
(package! nyan-mode)
(package! org-fancy-priorities)
(package! edit-indirect)
(package! vimrc-mode)
(package! pinentry)
(package! move-text)
(package! buffer-move)
(package! buffer-expose)
(package! exec-path-from-shell)
(package! flycheck-golangci-lint)
(package! command-log-mode)
(package! rego-mode)
(package! git-link)
(package! proced-narrow)
(package! transpose-frame)
(package! golden-ratio)

;; EXWM related.
;; (package! exwm-firefox-evil)
;; (package! exwm-firefox-core)
(when IS-LINUX
  (package! exwm-edit)
  (package! desktop-environment))
#+END_SRC
** Mine
Various forks and packages of my own.
#+BEGIN_SRC elisp :tangle packages.el
(package! evil-motion-trainer :recipe
  (:host github :repo "martinbaillie/evil-motion-trainer"))
(package! evil-easymotion :pin "e6051245c06354ccd4a57e054cdff80a34f18376" :recipe
  (:host github :repo "martinbaillie/evil-easymotion"))
#+END_SRC
* UI/General
*** Frame titles
#+BEGIN_SRC elisp
(setq frame-title-format '("%b – Emacs"))
#+END_SRC
*** Welcome screen
#+BEGIN_SRC elisp
(setq +doom-dashboard-banner-file
      (expand-file-name "logo.png" doom-private-dir))
(remove-hook '+doom-dashboard-functions #'doom-dashboard-widget-shortmenu)
#+END_SRC
*** Font
#+BEGIN_SRC elisp
(when IS-MAC
  (setq
   doom-font                     (font-spec :family "Iosevka" :size 13)
   doom-variable-pitch-font      (font-spec :family "Iosevka" :size 13)))
(setq +zen-text-scale 1)
(setq doom-font-increment  3)
#+END_SRC
*** Display line numbers relative to cursor
This is useful for command combinations e.g. 10j
#+BEGIN_SRC elisp
(setq display-line-numbers-type 'visual)
#+END_SRC

*** Don't truncate lines
#+BEGIN_SRC elisp
(set-default 'truncate-lines nil)
#+END_SRC

*** Increase time taken to pop which-key
The default is too fast and distracting.
#+BEGIN_SRC elisp
(setq-default which-key-idle-delay   1.0)
#+END_SRC

*** Scrolloff
Start scrolling X lines before the end of a screen.
#+BEGIN_SRC elisp
(setq
 scroll-conservatively 10
 scroll-margin 10)
#+END_SRC

Disable for terminal buffers since there can be issues completion/interactive shell scripts.
#+BEGIN_SRC elisp
(add-hook 'term-mode-hook (λ! (setq-local scroll-margin 0)))
(add-hook 'vterm-mode-hook (λ! (setq-local scroll-margin 0)))
(add-hook 'ivy-mode-hook (λ! (setq-local scroll-margin 0)))
#+END_SRC

*** Remove scrollbars
#+BEGIN_SRC elisp
(scroll-bar-mode -1)
#+END_SRC

*** Remove whitespace at end of lines on save
#+BEGIN_SRC elisp
(add-hook 'before-save-hook 'delete-trailing-whitespace)
#+END_SRC

*** Themes
Load current theme.
#+BEGIN_SRC elisp
(load! "+theme")
#+END_SRC

*** Formatting
#+BEGIN_SRC elisp
(setq
 +format-on-save-enabled-modes '(not elisp-mode sql-mode tex-mode markdown-mode gfm-mode html-mode mhtml-mode))
#+END_SRC

*** Brighter region highlights for my dark themes
#+BEGIN_SRC elisp
;; (if (eq doom-theme 'doom-dracula)
;;     (custom-set-faces
;;      '(region ((t (:background "#bd93f9" :foreground "black"))))
;;      )
;;   )
(if (eq doom-theme 'doom-one)
    (custom-set-faces
     '(region ((t (:background "#51afef" :foreground "black"))))
     )
  )
#+END_SRC

*** Move to splits after creating
#+BEGIN_SRC elisp
(setq evil-split-window-below t
      evil-vsplit-window-right t)
#+END_SRC

*** Simpler modeline in EXWM
#+BEGIN_SRC elisp
(after! doom-modeline
  ;; Don't care about encoding.
  (setq doom-modeline-buffer-encoding nil)
  ;; Or state.
  (setq doom-modeline-buffer-state-icon nil)
  ;; But I like file type icons.
  (setq doom-modeline-major-mode-icon t)
  ;; Re-organise.
  (doom-modeline-def-modeline 'main
    '(bar workspace-name window-number buffer-info word-count
          remote-host parrot modals buffer-position selection-info)
    '(objed-state persp-name grip irc mu4e gnus debug repl lsp minor-modes
                  input-method indent-info buffer-encoding major-mode
                  process vcs checker matches)))
#+END_SRC

*** Default modes
#+BEGIN_SRC elisp
(add-to-list 'auto-mode-alist '(".*\\.txt" . indented-text-mode))
(add-to-list 'auto-mode-alist '("github\\.com_.*\\.txt" . gfm-mode))
(add-to-list 'auto-mode-alist '("tridactyl\\(rc\\)?\\'" . vimrc-mode))
#+END_SRC

*** Always fullscreen
#+begin_src elisp
(set-frame-parameter (selected-frame) 'fullscreen 'maximized)
(add-to-list 'default-frame-alist '(fullscreen . maximized))
#+end_src

* UI/macOS
*** Source a clean shell environment
#+BEGIN_SRC elisp
(when IS-MAC
  (setq exec-path-from-shell-check-startup-files nil)
  (exec-path-from-shell-initialize)
  (exec-path-from-shell-copy-env "GOPATH")
  (exec-path-from-shell-copy-env "SSH_AUTH_SOCK")
  )
#+END_SRC
*** Use font smoothing
#+BEGIN_SRC elisp
;; (when IS-MAC (setq ns-use-thin-smoothing t))
#+END_SRC
*** Hide icons in titles
#+BEGIN_SRC elisp
(when IS-MAC (setq ns-use-proxy-icon nil))
#+END_SRC
*** Native macOS titles
#+BEGIN_SRC elisp
;; (when IS-MAC
;;   (add-to-list 'default-frame-alist '(ns-transparent-titlebar . t)))
#+END_SRC
*** Native macOS fullscreen
#+BEGIN_SRC elisp
;; (when IS-MAC
;; Native macOS fullscreen.
;; (add-to-list 'default-frame-alist '(fullscreen . fullboth))
;; )
#+END_SRC
*** Transparency
#+BEGIN_SRC elisp
(when IS-MAC
  (set-frame-parameter (selected-frame) 'alpha '(97 . 97))
  (add-to-list 'default-frame-alist '(alpha . (97 . 97)))
  (add-to-list 'default-frame-alist '(inhibit-double-buffering . t)))
#+END_SRC
* UI/Linux
*** Transparency
Set frame transparency and maximize windows by default.
#+begin_src elisp
(when IS-LINUX
  (set-frame-parameter (selected-frame) 'alpha '(95 . 95))
  (add-to-list 'default-frame-alist '(alpha . (95 . 95)))
  (add-to-list 'default-frame-alist '(inhibit-double-buffering . t)))
#+end_src
* Keys/General
Miscellaneous.
#+BEGIN_SRC elisp
(map!
 :n "C-s" #'save-buffer
 :n "C-/" #'evil-avy-goto-char-timer
 :n "q" #'kill-current-buffer
 :v "v" #'er/expand-region
 :v "V" #'er/contract-region

 :vgni "s-x" #'execute-extended-command
 :vgni "s-," #'+vertico/switch-workspace-buffer
 :vgni "s-/" #'consult-buffer
 :vgni "s-f" #'consult-line
 :vgni "s-." #'+workspace/switch-to
 :vgni "H-s-x" #'execute-extended-command
 :vgni "H-s-," #'+vertico/switch-workspace-buffer
 :vgni "H-s-/" #'consult-buffer
 :vgni "H-s-." #'+workspace/switch-to
 :vgni "s-1"   #'+workspace/switch-to-0
 :vgni "s-2"   #'+workspace/switch-to-1
 :vgni "s-3"   #'+workspace/switch-to-2
 :vgni "s-4"   #'+workspace/switch-to-3
 :vgni "s-5"   #'+workspace/switch-to-4
 :vgni "s-6"   #'+workspace/switch-to-5
 :vgni "s-7"   #'+workspace/switch-to-6
 :vgni "s-8"   #'+workspace/switch-to-7
 :vgni "s-9"   #'+workspace/switch-to-8
 :vgni "s-0"   #'+workspace/switch-to-final)
#+END_SRC

Merge comment (dwim and line).
#+BEGIN_SRC elisp
(defun xah-comment-dwim ()
  "Like `comment-dwim', but toggle comment if cursor is not at end of line.

URL `http://ergoemacs.org/emacs/emacs_toggle_comment_by_line.html'
Version 2016-10-25"
  (interactive)
  (if (region-active-p)
      (comment-dwim nil)
    (let (($lbp (line-beginning-position))
          ($lep (line-end-position)))
      (if (eq $lbp $lep)
          (progn
            (comment-dwim nil))
        (if (eq (point) $lep)
            (progn
              (comment-dwim nil))
          (progn
            (comment-or-uncomment-region $lbp $lep)
            (forward-line )))))))

(map! :n "C-?" #'xah-comment-dwim)
#+END_SRC

Evil frame movements.
#+BEGIN_SRC elisp
(map!
 :n "C-h" #'evil-window-left
 :n "C-j" #'evil-window-down
 :n "C-k" #'evil-window-up
 :n "C-l" #'evil-window-right

 (:map evil-window-map
  "-" (lambda () (interactive) (evil-window-decrease-height 7))
  "+" (lambda () (interactive) (evil-window-increase-height 7))
  "<" (lambda () (interactive) (evil-window-decrease-width 7))
  ">" (lambda () (interactive) (evil-window-increase-width 7))))
#+END_SRC

Evil subword movements.
#+BEGIN_SRC elisp
(global-subword-mode 1)
#+END_SRC

Motion training.
#+BEGIN_SRC elisp
(use-package! evil-motion-trainer
  :init
  (global-evil-motion-trainer-mode 1))

(map!
 :leader
 (:prefix-map ("t" . "toggle")
  :desc "Evil motion trainer" "t" #'evil-motion-trainer-mode))
#+END_SRC

Find in dotfiles.
#+begin_src elisp
(defun mb/find-in-dotfiles ()
  "Fuzzy find in dotfiles."
  (interactive)
  (doom-project-find-file (expand-file-name "/etc/dotfiles")))
(map! :leader "f ." #'mb/find-in-dotfiles)
#+end_src
* Keys/Linux
#+BEGIN_SRC elisp
(when IS-LINUX
  (map!
   "s-c" (if (featurep 'evil) #'evil-yank #'copy-region-as-kill)
   "s-v" #'yank
   "H-s-c" (if (featurep 'evil) #'evil-yank #'copy-region-as-kill)
   "H-s-v" #'yank
   "H-s-f" #'consult-line))
#+END_SRC

* Keys/macOS
#+BEGIN_SRC elisp
(when IS-MAC
  (map!
   :gni [s-return] #'toggle-frame-fullscreen
   )
  )
#+END_SRC

* Package Customisation
** org
*** Centered buffers
#+begin_src elisp
(defun mb/org-mode-visual-fill ()
  (setq visual-fill-column-width 100
        visual-fill-column-center-text t
        display-fill-column-indicator nil)
  (visual-fill-column-mode 1))

(use-package! visual-fill-column
  :hook (org-mode . mb/org-mode-visual-fill))
#+end_src
*** Tree slide
#+begin_src elisp
(org-tree-slide-presentation-profile)

(setq +org-present-text-scale 1
      org-tree-slide-modeline-display nil
      org-tree-slide-slide-in-effect t
      org-tree-slide-cursor-init nil
      org-tree-slide-heading-emphasis t
      org-tree-slide-content-margin-top 1
      org-tree-slide-indicator
      '(:next nil
        :previous nil
        :content nil))

(defun mb/org-tree-slide-mode-hook ()
  (setq-local evil-motion-trainer-mode nil)
  (spell-fu-mode-disable)
  (writegood-turn-off)
  (org-display-inline-images)
  (doom-disable-line-numbers-h))

(add-hook! 'org-tree-slide-play-hook 'mb/org-tree-slide-mode-hook)

(advice-remove 'org-tree-slide--display-tree-with-narrow
               #'+org-present--narrow-to-subtree-a)

(map! :map org-tree-slide-mode-map
      :n "q" (lambda () (interactive) (org-tree-slide-mode 0)))
#+end_src
*** Scratch buffers
#+BEGIN_SRC elisp
(setq doom-scratch-buffer-major-mode 'org-mode)
(setq doom-scratch-initial-major-mode 'org-mode)
#+END_SRC

*** Dropbox-based cache folder
#+BEGIN_SRC elisp
(setq org-directory "~/Dropbox/org"
      org-archive-location "~/Dropbox/org/archive/%s_archive::")
#+END_SRC

*** Fold all on startup
#+BEGIN_SRC elisp
(setq org-startup-folded 'content)
#+END_SRC

*** Capture templates
#+BEGIN_SRC elisp
(after! org
  (setq org-capture-templates
        '(("t" "Personal todo" entry
           (file+headline +org-capture-todo-file "Inbox")
           "* [ ] %?\n%i\n%a" :prepend t)
          ("n" "Personal notes" entry
           (file+headline +org-capture-notes-file "Inbox")
           "* %u %?\n%i\n%a" :prepend t)
          ("j" "Journal" entry
           (file+olp+datetree +org-capture-journal-file)
           "* %U %?\n%i\n%a" :prepend t)

          ;; Will use {project-root}/{todo,notes,changelog}.org, unless a
          ;; {todo,notes,changelog}.org file is found in a parent directory.
          ;; Uses the basename from `+org-capture-todo-file',
          ;; `+org-capture-changelog-file' and `+org-capture-notes-file'.
          ("p" "Templates for projects")
          ("pt" "Project-local todo" entry  ; {project-root}/todo.org
           (file+headline +org-capture-project-todo-file "Inbox")
           "* [ ] TODO %?\n%i\n%a" :prepend t)
          ("pn" "Project-local notes" entry  ; {project-root}/notes.org
           (file+headline +org-capture-project-notes-file "Inbox")
           "* %U %?\n%i\n%a" :prepend t)
          ("pc" "Project-local changelog" entry  ; {project-root}/changelog.org
           (file+headline +org-capture-project-changelog-file "Unreleased")
           "* %U %?\n%i\n%a" :prepend t)

          ;; Will use {org-directory}/{+org-capture-projects-file} and store
          ;; these under {ProjectName}/{Tasks,Notes,Changelog} headings. They
          ;; support `:parents' to specify what headings to put them under, e.g.
          ;; :parents ("Projects")
          ("o" "Centralized templates for projects")
          ("ot" "Project todo" entry
           (function +org-capture-central-project-todo-file)
           "* [ ] TODO %?\n %i\n %a"
           :heading "Tasks"
           :prepend nil)
          ("on" "Project notes" entry
           (function +org-capture-central-project-notes-file)
           "* %U %?\n %i\n %a"
           :heading "Notes"
           :prepend t)
          ("oc" "Project changelog" entry
           (function +org-capture-central-project-changelog-file)
           "* %U %?\n %i\n %a"
           :heading "Changelog"
           :prepend t)))
  )
#+END_SRC
*** Hugo
#+begin_src elisp
(setq org-hugo-export-with-toc t)
#+end_src
*** Agenda files
#+BEGIN_SRC elisp
(setq org-work-directory (concat org-directory "/work/*/")
      org-agenda-files (list org-directory
                             org-work-directory))
(setq org-log-done 'time)
#+END_SRC

*** Keywords
#+BEGIN_SRC elisp
(setq
 org-todo-keywords
 '((sequence "TODO(t)" "PROG(p)" "|" "DONE(d)" "ABRT(c)")
   (sequence "[ ](T)" "[-](P)" "[?](M)" "|" "[X](D)"))
 org-todo-keyword-faces
 '(("[-]" :inherit (font-lock-constant-face bold))
   ("[?]" :inherit (warning bold))
   ("TODO" :inherit (success bold))
   ("PROG" :inherit (bold default))
   ("DONE" :inherit (warning bold))
   ("ABRT" :inherit (error bold)))
 )
#+END_SRC

*** Priorities
#+BEGIN_SRC elisp
(after! org
  (setq org-priority-faces '((?A . (:foreground "red" :weight 'bold))
                             (?B . (:foreground "orange"))
                             (?C . (:foreground "teal"))))
  (use-package! org-fancy-priorities
    :hook (org-mode . org-fancy-priorities-mode)
    :config (setq org-fancy-priorities-list '("⬆" "⬇" "☕"))
    )
  )
#+END_SRC

*** Keys
#+BEGIN_SRC elisp
(map!
 (:map org-mode-map
  :ni "<s-backspace>" #'org-babel-remove-result
  :ni [M-return] #'org-meta-return
  :ni [S-M-return] #'org-insert-todo-heading

  :i "<S-tab>" #'+org/dedent
  )
 )
#+END_SRC

** projectile
*** Known directories and search path
#+BEGIN_SRC elisp
(projectile-add-known-project "~/Dropbox/org")
(projectile-add-known-project "/etc/dotfiles")
(setq projectile-project-search-path '("~/Code/work" "~/Code/personal" "~/Code/upstream"))
#+END_SRC
** direnv
Silence annoying popup
#+BEGIN_SRC elisp
(setq direnv-always-show-summary nil)
#+END_SRC
** hl-todo
*** Enable everywhere
#+BEGIN_SRC emacs-lisp
(add-hook 'text-mode-hook #'hl-todo-mode)
#+END_SRC
** format-all
*** Disabled modes
#+BEGIN_SRC elisp
;; (setq +format-on-save-enabled-modes
;;       '(not elisp-mode
;;             sql-mode
;;             yaml-mode
;;             sgml-xml-mode)
;;       )

;; (defun mb/format-on-save-disable ()
;;   "Disable formatting on save."
;;   (interactive)
;;   (remove-hook 'before-save-hook #'+format-buffer-h))
#+END_SRC
** company
*** Keys
#+BEGIN_SRC elisp
(use-package! company-tng
  :config
  (define-key! company-active-map
    "RET" 'company-complete-selection
    [return] 'company-complete-selection
    )
  )
#+END_SRC

** go
*** LSP
#+BEGIN_SRC elisp
(after! go-mode
  (defun lsp-go-install-save-hooks ()
    (add-hook 'before-save-hook #'lsp-organize-imports t t))
  (add-hook 'go-mode-hook #'lsp-go-install-save-hooks)
  (setq gofmt-command "gofumpt")
  )

(after! lsp-mode
  (lsp-register-custom-settings
   '(("gopls.completeUnimported" t t)
     ("gopls.staticcheck" t t)
     ("gopls.completionDocumentation" t t)
     )
   )
  )
#+END_SRC

*** DAP
#+BEGIN_SRC elisp
;; (setq godoc-at-point-function 'godoc-gogetdoc)
;; debugger configuration
(require 'dap-go)
(dap-go-setup)
(dap-mode 1)
(dap-ui-mode 1)
(dap-tooltip-mode 1)
(tooltip-mode 1)
#+END_SRC

*** Keys
#+BEGIN_SRC elisp
(map! :map go-mode-map
      :nv "K"  #'lsp-describe-thing-at-point)
#+END_SRC
** python
Locate the preferred language server.
#+BEGIN_SRC elisp
(after! lsp-python-ms
  (setq lsp-python-ms-executable (executable-find "python-language-server"))
  (set-lsp-priority! 'mspyls 1))
#+END_SRC
** nyanmode
Oh gees.
#+BEGIN_SRC elisp
(use-package! nyan-mode
  :after doom-modeline
  :init
  (setq nyan-bar-length 20)
   (nyan-mode))
#+END_SRC
** dired
Dired coloured icons.
#+begin_src elisp
(setq all-the-icons-dired-monochrome nil)
#+end_src
** avy
*** Search across all windows
#+BEGIN_SRC elisp
(setq avy-all-windows t)
#+END_SRC
*** Select the single candidate
#+BEGIN_SRC elisp
(setq avy-single-candidate-jump t)
#+END_SRC
*** Faster timers
#+BEGIN_SRC elisp
(setq avy-timeout-seconds 0.35)
#+END_SRC
** magit
*** Avatars
#+BEGIN_SRC elisp
(setq magit-revision-show-gravatars '("^Author:     " . "^Commit:     "))
#+END_SRC
*** Git sign-off line
Automatically add a git signoff line based on discovered environmental identity.
#+BEGIN_SRC elisp
(add-hook 'git-commit-mode-hook (lambda () (apply #'git-commit-signoff (git-commit-self-ident))))
#+END_SRC
*** Status buffer
#+begin_src elisp
;; Unfold some more displays by default.
(prependq! magit-section-initial-visibility-alist '((issues . show)
                                                    (pullreqs . show)
                                                    (unpushed . show)))
;; No motion training on status buffers.
(add-hook 'magit-status-mode-hook (lambda () (evil-motion-trainer-mode -1)))
#+end_src
** yaml
Get the YAML language server to validate Kubernetes resources.
#+BEGIN_SRC elisp
(setq lsp-yaml-schemas (make-hash-table))
(puthash "kubernetes" ["kube.yaml"
                       "resources.yaml"
                       "resources/*"
                       "pod.yaml"
                       "deployment.yaml"
                       "serviceaccount.yaml"
                       "clusterrole.yaml"
                       "role.yaml"
                       "clusterrolebinding.yaml"
                       "rolebinding.yaml"
                       "configmap.yaml"
                       "service.yaml"]
         lsp-yaml-schemas)
(puthash "http://json.schemastore.org/kustomization" ["kustomization.yaml"] lsp-yaml-schemas)
#+END_SRC
** terraform
Enable LSP for Terraform.
#+BEGIN_SRC elisp
(after! lsp-mode
  (lsp-register-client
   (make-lsp-client :new-connection (lsp-stdio-connection '("terraform-lsp" "serve"))
                    :major-modes '(terraform-mode)
                    :server-id 'terraform-lsp))
  )
(add-hook 'terraform-mode-hook #'lsp-deferred)
#+END_SRC
** pinentry
*** Use Emacs pinentry on Linux
#+BEGIN_SRC elisp
(use-package pinentry
  :demand t
  :after epg

  :config
  ;; Allow gpg-connect-agent in ssh-agent mode to forward pinentry to Emacs
  ;; since the ssh-agent protocol has no way to pass the TTY to gpg-agent.
  ;;
  ;; Also this hook has a nice effect of auto-starting gpg-agent when
  ;; needed by ssh.
  (setenv "INSIDE_EMACS" emacs-version)

  (shell-command
   "gpg-connect-agent updatestartuptty /bye"
   " *gpg-update-tty*")

  (pinentry-start)
  )
#+END_SRC
** treemacs
*** Keys
Toggling.
#+BEGIN_SRC elisp
(map!
 :n "C-S-e" #'+treemacs/toggle
 (:map evil-treemacs-state-map "C-S-e" #'+treemacs/toggle))
#+END_SRC

Evil frame movements.
#+BEGIN_SRC elisp
(map!
 (:map evil-treemacs-state-map
  "C-h" #'evil-window-left
  "C-l" #'evil-window-right))
#+END_SRC
** easy-motion
*** Better scoped easy-motions
#+BEGIN_SRC elisp
(define-key! 'global
    [remap evilem-motion-forward-word-end] #'evilem-motion-forward-WORD-end
    [remap evilem-motion-forward-word-begin] #'evilem-motion-forward-WORD-begin
    [remap evilem-motion-backward-word-end] #'evilem-motion-backward-WORD-end
    [remap evilem-motion-backward-word-begin] #'evilem-motion-backward-WORD-begin
    )
#+END_SRC
*** Keys
#+BEGIN_SRC elisp
(map! (:after evil-easymotion :m "C-f" evilem-map))
#+END_SRC
** move-text
*** Keys
Add additional evil movements for text moves.
#+BEGIN_SRC elisp
(map! :m "M-j" #'move-text-down
      :m "M-k" #'move-text-up)
#+END_SRC
** buffer-move
*** Keys
Add evil movements to buffer moves.
#+BEGIN_SRC elisp
(map! :vgni "M-J" #'buf-move-down
      :vgni "M-K" #'buf-move-up
      :vgni "M-H" #'buf-move-left
      :vgni "M-L" #'buf-move-right)
#+END_SRC
** buffer-expose
*** Disable scaling
#+BEGIN_SRC elisp
(setq-default buffer-expose-rescale-factor 1)
#+END_SRC

*** Workspace expose functions
#+BEGIN_SRC elisp
(defun buffer-workspace-expose (&optional max)
  "Expose workspace buffers.
If MAX is given it determines the maximum number of windows to
show per page, which defaults to `buffer-expose-max-num-windows'."
  (interactive "P")
  (buffer-expose-show-buffers (projectile-project-buffers) max nil))

(defun buffer-workspace-vterm-expose (&optional max)
  "Expose vterm workspace buffers.
If MAX is given it determines the maximum number of windows to
show per page, which defaults to
`buffer-expose-max-num-windows'."
  (interactive "P")
  (buffer-expose-show-buffers
   (projectile-project-buffers) max nil
   (lambda (buffer)
     (string-prefix-p "vterm: " (buffer-name buffer)))))
#+END_SRC

*** Keys
Add evil movements to expose view.
#+BEGIN_SRC elisp
;; TODO: Fix.
;; (map!
;;  (:map buffer-expose-grid-map
;;   :vgni "h" 'buffer-expose-left-window
;;   :vgni "k" 'buffer-expose-up-window
;;   :vgni "j" 'buffer-expose-down-window
;;   :vgni "l" 'buffer-expose-right-window))
#+END_SRC

Add expose functions to buffer commands.
#+BEGIN_SRC elisp
(map! :leader
      :desc "Expose buffers" "be" #'buffer-expose
      :desc "Expose workspace buffers" "bw" #'buffer-workspace-expose
      :desc "Expose workspace vterm buffers" "bv" #'buffer-workspace-vterm-expose)
#+END_SRC
** golden-ratio
Automatically resize the viewable windows according to the golden ratio.
#+begin_src elisp
(use-package! golden-ratio
  :config
  (setq golden-ratio-extra-commands
        (append golden-ratio-extra-commands
                '(evil-window-left
                  evil-window-right
                  evil-window-up
                  evil-window-down
                  ace-window
                  select-window-1
                  select-window-2
                  select-window-3
                  select-window-4
                  select-window-5)))
  (map! (:map evil-window-map
         "g" #'golden-ratio
         "G" #'golden-ratio-mode
         ))
  )
#+end_src
** proced
#+begin_src emacs-lisp
(use-package! proced
  :config
  (setq-default proced-tree-flag t
                proced-filter 'user))

(map! :leader
      (:prefix-map ("o" . "open")
       :desc "Proced" "=" #'proced))
#+end_src
*** Narrowing processes
#+begin_src elisp
(use-package! proced-narrow
  :after proced
  :config
  (map!
   :map proced-mode-map
   :n "/" #'proced-narrow))
#+end_src
*** Readable Nix paths
#+begin_src elisp
;; WIP Shorten long paths.
;; (defun +mb/proced-remove-nix-path (oldformat &rest xs)
;;   (let ((xs (--map (->> it
;;                      (s-replace-regexp "/nix/store/[^/]+" "{nix}")
;;                      (s-replace-regexp (template "^/home/<<(user-login-name)>>") "~")
;;                      )
;;                    xs)))
;;     (progn (message xs)
;;            (apply oldformat xs))))
;; (defun +mb/proced-remove-nix-path (fn &rest args)
;;   "Run FN with ARGS then return only the process without the path."
;;   (let ((parts (split-string (apply fn args) " ")))
;;     (message (apply fn args))
;;     ;; (file-name-nondirectory (car parts))
;;     ;; (s-replace-regexp "/nix/store/[^/]+" "{nix}" parts)
;;     ))

;; (advice-add #'proced-format-args :around #'+mb/proced-remove-nix-path)
#+end_src
** vterm
Use system-wide vterm lib when compiling.
#+BEGIN_SRC elisp
(setq vterm-module-cmake-args "-DUSE_SYSTEM_LIBVTERM=yes")
#+END_SRC

*** Mode handling
Handle escape between Emacs and vterm.
#+BEGIN_SRC elisp
(defun evil-collection-vterm-toggle-send-escape-ins ()
  "Toggle where ESC is sent between `vterm' and `emacs'.
This is needed for programs that use ESC, e.g. vim or an ssh'd emacs that
also uses `evil-mode'. This version sends a `vterm' INS when in `emacs'."
  (interactive)
  (if evil-collection-vterm-send-escape-to-vterm-p
      (evil-collection-define-key 'insert 'vterm-mode-map (kbd "<escape>")
        (lookup-key evil-insert-state-map (kbd "<escape>"))
        (evil-escape))
    (evil-collection-define-key 'insert 'vterm-mode-map
      (kbd "<escape>") 'vterm--self-insert)
    (evil-insert-state))
  (setq evil-collection-vterm-send-escape-to-vterm-p
        (not evil-collection-vterm-send-escape-to-vterm-p))
  (message (format "Sending ESC to %s."
                   (if evil-collection-vterm-send-escape-to-vterm-p
                       "vterm"
                     "emacs"))))

(defun evil-collection-vterm-send-escape-emacs ()
  "Send ESC to `emacs' when in `vterm'."
  (interactive)
  (when (and
         (eq major-mode 'vterm-mode)
         evil-collection-vterm-send-escape-to-vterm-p
         )
    (evil-collection-define-key 'insert 'vterm-mode-map (kbd "<escape>")
      (lookup-key evil-insert-state-map (kbd "<escape>"))
      (evil-escape)
      (setq evil-collection-vterm-send-escape-to-vterm-p nil)
      (message "Sending ESC to emacs.")))
  )

(defun evil-collection-vterm-send-escape-vterm ()
  "Send ESC to `vterm' when in `emacs'."
  (interactive)
  (when (and
         (eq major-mode 'vterm-mode)
         (not evil-collection-vterm-send-escape-to-vterm-p)
         )
    (evil-collection-define-key 'insert 'vterm-mode-map
      (kbd "<escape>") 'vterm--self-insert)
    (setq evil-collection-vterm-send-escape-to-vterm-p t)
    (message "Sending ESC to vterm.")
    )
  )

(defun vterm-exit-visual-insert ()
  "Send evil-insert after exiting visual state."
  (interactive)
  (when (or
         (evil-visual-state-p)
         (evil-normal-state-p))
    (evil-exit-visual-state)
    (evil-insert-state 1)
    )
  )

(add-hook 'evil-insert-state-entry-hook #'evil-collection-vterm-send-escape-vterm)
#+END_SRC

*** Scroll
Scrollback limit.
#+BEGIN_SRC elisp
(setq-default vterm-max-scrollback 9999)
#+END_SRC

Allow stop scroll term sequence.
#+BEGIN_SRC elisp
(defun vterm-disable-output ()
  (interactive)
  (unless (evil-normal-state-p)
    (evil-normal-state))
  (vterm-send-key "s" nil nil t))
#+END_SRC

*** Titles
#+BEGIN_SRC elisp
(setq vterm-buffer-name "vterm"
      vterm-buffer-name-string "vterm: %s")
#+END_SRC

*** Prompt Outlines
#+BEGIN_SRC elisp
;; Old dir + Lambda based prompt:
;; (setq-hook! 'vterm-mode-hook outline-regexp "^[a-zA-Z.\/~❮]*[ ]*λ.*")
;; New uber minimal prompt:
(setq-hook! 'vterm-mode-hook outline-regexp "^; .*")
#+END_SRC

*** Copy mode
Exclude prompts when exiting copy mode.
#+BEGIN_SRC elisp
(setq vterm-copy-exclude-prompt t)
#+END_SRC

Detect prompts using the vterm prompt tracking technique when exiting copy mode.
#+BEGIN_SRC elisp
(setq vterm-use-vterm-prompt-detection-method t)
#+END_SRC

Jump back into insert mode when exiting copy mode.
#+BEGIN_SRC elisp
(advice-add 'vterm-copy-mode-done :after
            (lambda (&rest _) (funcall #'vterm-exit-visual-insert)))
#+END_SRC

Make evil-yank work by bypassing vterm-copy-mode-done kill ring logic.
#+BEGIN_SRC elisp
(advice-add 'evil-yank :after
            (lambda (&rest _)
              (when (bound-and-true-p vterm-copy-mode)
                (vterm-copy-mode -1)
                (vterm-exit-visual-insert))))
#+END_SRC

Display line numbers in copy mode.
#+BEGIN_SRC elisp
(add-hook 'vterm-copy-mode-hook
          (lambda ()
            (if vterm-copy-mode
                (progn (evil-escape) (setq display-line-numbers 'relative))
              (setq display-line-numbers nil))))
#+END_SRC

*** Keys
Miscellaneous vterm bindings.
#+BEGIN_SRC elisp
(map!
 ;; Pop new vterms.
 :vgni "s-;" #'+vterm/here
 :vgni "H-s-;" #'+vterm/here

 (:map vterm-mode-map

  ;; Enter copy mode.
  :vni "C-SPC" #'vterm-copy-mode

  ;; Stop scrolling.
  :vni "C-s" #'vterm-disable-output

  ;; Fix shift-space vterm ';2u' artefact.
  :i "S-SPC" "SPC"
  :i "H-S-SPC" "SPC"

  ;; Term sequences.
  :i "C-c" #'vterm-send-C-c
  :i "C-z" #'vterm-send-C-z

  ;; Claim TAB from Emacs.
  :i [tab] #'vterm-send-tab
  :i "TAB" #'vterm-send-tab

  ;; Fix C-backspace.
  :i "<C-backspace>" (lambda () (interactive) (vterm-send-key (kbd "C-w")))
  :i "<s-backspace>" (lambda () (interactive) (vterm-send-key (kbd "C-w")))
  )

 (:map vterm-copy-mode-map
  ;; Allow yank motions to exit directly
  :mnv "y" #'evil-yank
  ;; Prompt hopping and folding.
  :mnv "[[" #'vterm-previous-prompt
  :mnv "]]" #'vterm-next-prompt
  :mnv "<tab>" #'outline-toggle-children
  )
 )
#+END_SRC

Fix escape for vterm.
#+BEGIN_SRC elisp
(setq evil-collection-key-blacklist
      (list "C-w" "C-j" "C-k" "gd" "gf" "K" "[" "]" "gz"
            doom-leader-key doom-localleader-key
            doom-leader-alt-key doom-localleader-alt-key))
#+END_SRC

Evil frame movements.
#+BEGIN_SRC elisp
(map!
 (:map vterm-copy-mode-map
   :i "C-h" #'evil-window-left
   :i "C-j" #'evil-window-down
   :i "C-k" #'evil-window-up
   :i "C-l" #'evil-window-right)

 (:map vterm-mode-map
   :nvi "C-w" evil-window-map
   :i "C-h" #'evil-window-left
   :i "C-j" #'vterm--self-insert
   :i "C-k" #'vterm--self-insert
   :i "C-l" #'evil-window-right)
 )
#+END_SRC

Pass frame movements through to Emacs.
#+BEGIN_SRC elisp
(use-package! vterm
  :defer t
  :init
  (setq vterm-module-cmake-args "-DUSE_SYSTEM_LIBVTERM=yes")
  :config
  (add-to-list 'vterm-keymap-exceptions "C-w"))
#+END_SRC
** EXWM
Load my flavour of EXWM when in Linux.
#+begin_src elisp
(when IS-LINUX
  (load! "+exwm"))
#+end_src
