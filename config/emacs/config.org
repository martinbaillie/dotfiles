#+TITLE: My Literate Emacs Configuration
#+AUTHOR: Martin Baillie
#+EMAIL: martin@baillie.email

#+LANGUAGE: en
#+STARTUP: inlineimages
#+PROPERTY: header-args :tangle yes :cache yes :results silent :padline no

* Table of Contents :TOC_2_gh:
- [[#personal][Personal]]
- [[#uigeneral][UI/General]]
- [[#uimacos][UI/macOS]]
- [[#keysgeneral][Keys/General]]
- [[#keyslinux][Keys/Linux]]
- [[#keysmacos][Keys/macOS]]
- [[#package-customisation][Package Customisation]]
  - [[#org][org]]
  - [[#projectile][projectile]]
  - [[#deadgrep][deadgrep]]
  - [[#format-all][format-all]]
  - [[#company][company]]
  - [[#go][go]]
  - [[#nyanmode][nyanmode]]
  - [[#avy][avy]]
  - [[#magit][magit]]
  - [[#kubectx][kubectx]]
  - [[#pinentry][pinentry]]
  - [[#treemacs][treemacs]]
  - [[#easy-motion][easy-motion]]
  - [[#undotree][undotree]]
  - [[#move-text][move-text]]
  - [[#buffer-move][buffer-move]]
  - [[#buffer-expose][buffer-expose]]
  - [[#vterm][vterm]]

* [6/10] Tasks :noexport:
- [X] A binding for org-babel-remove-result when in Org mode
- [X] A binding for org-insert-todo-heading
- [X] A binding for quick comment toggles
- [X] Why does YAML mode remove comments?
- [X] Still need to solve emacsclient issue for mac
- [X] Using pipe and filter in vterm causes deletions ;2u
- [ ] Turn off auto-fill-mode and format-all-mode for HTML
- [ ] Finish motion trainer code
- [ ] Use 'y' for copy in vterm mouse select mode
- [ ] Make Ivy swiper work in vterm buffers
- [ ] Finish vterm buffer expose
- [ ] Fix org-mode ligatures

* Personal
#+BEGIN_SRC emacs-lisp
(setq user-full-name "Martin Baillie"
      user-mail-address "martin@baillie.email")
#+END_SRC

* UI/General
*** Frame titles
#+BEGIN_SRC emacs-lisp
(setq frame-title-format '("%b – Emacs"))
#+END_SRC

*** Welcome screen
#+BEGIN_SRC emacs-lisp
(setq +doom-dashboard-banner-file (expand-file-name "logo.png" doom-private-dir))
#+END_SRC

*** Display line numbers relative to cursor
This is useful for command combinations e.g. 10j
#+BEGIN_SRC emacs-lisp
(setq display-line-numbers-type 'relative)
#+END_SRC

*** Don't truncate lines
#+BEGIN_SRC emacs-lisp
(set-default 'truncate-lines nil)
#+END_SRC

*** Decrease time taken to pop which-key
The default is too slow.
#+BEGIN_SRC emacs-lisp
(setq-default which-key-idle-delay   0.4)
#+END_SRC

*** Scrolloff
Start scrolling X lines before the end of a screen.
#+BEGIN_SRC emacs-lisp
(setq
 scroll-conservatively 10
 scroll-margin 10)
#+END_SRC

Disable for terminal buffers since there can be issues completion/interactive shell scripts.
#+BEGIN_SRC emacs-lisp
(add-hook 'term-mode-hook (λ! (setq-local scroll-margin 0)))
(add-hook 'vterm-mode-hook (λ! (setq-local scroll-margin 0)))
(add-hook 'ivy-mode-hook (λ! (setq-local scroll-margin 0)))
#+END_SRC

*** Remove scrollbars
#+BEGIN_SRC emacs-lisp
(scroll-bar-mode -1)
#+END_SRC

*** Remove whitespace at end of lines on save
#+BEGIN_SRC emacs-lisp
(add-hook 'before-save-hook 'delete-trailing-whitespace)
#+END_SRC

*** Themes
Load current theme.
#+BEGIN_SRC emacs-lisp
(load! "+theme")
#+END_SRC

*** Formatting
#+BEGIN_SRC emacs-lisp
(setq
 +format-on-save-enabled-modes '(not emacs-lisp-mode sql-mode tex-mode markdown-mode gfm-mode html-mode mhtml-mode))
#+END_SRC

*** Brighter region highlights
#+BEGIN_SRC emacs-lisp
(custom-set-faces
 '(region ((t (:background "#51afef" :foreground "black"))))
 )
#+END_SRC

* UI/macOS
*** Source a clean shell environment
#+BEGIN_SRC emacs-lisp
(when IS-MAC
  (setq exec-path-from-shell-check-startup-files nil)
  (exec-path-from-shell-initialize)
  (exec-path-from-shell-copy-env "GOPATH")
  (exec-path-from-shell-copy-env "SSH_AUTH_SOCK")
  )
#+END_SRC

*** Use font smoothing
  #+BEGIN_SRC emacs-lisp
(when IS-MAC (setq ns-use-thin-smoothing t))
  #+END_SRC

*** Hide icons in titles
  #+BEGIN_SRC emacs-lisp
(when IS-MAC (setq ns-use-proxy-icon nil))
  #+END_SRC

*** Native macOS titles
#+BEGIN_SRC emacs-lisp
(when IS-MAC
  (add-to-list 'default-frame-alist '(ns-transparent-titlebar . t))
  ;; (add-to-list 'default-frame-alist '(ns-appearance . dark))
  )
#+END_SRC

*** Native macOS fullscreen
#+BEGIN_SRC emacs-lisp
(when IS-MAC
  ;; Windowed macOS fullscreen.
  (add-to-list 'default-frame-alist '(fullscreen . maximized))

  ;; Native macOS fullscreen.
  ;; (add-to-list 'default-frame-alist '(fullscreen . fullboth))
  )
#+END_SRC

* Keys/General
Miscellaneous.
#+BEGIN_SRC emacs-lisp
(map!
 :n "C-s" #'save-buffer
 :n "C-/" #'evil-avy-goto-char-timer
 :n "q" #'kill-current-buffer
 :v "v" #'er/expand-region
 :v "V" #'er/contract-region

 :vgni "s-x" #'execute-extended-command
 :vgni "s-," #'+ivy/switch-workspace-buffer
 :vgni "s-." #'+workspace/switch-to
 )
#+END_SRC

Merge comment (dwim and line).
#+BEGIN_SRC emacs-lisp
(defun xah-comment-dwim ()
  "Like `comment-dwim', but toggle comment if cursor is not at end of line.

URL `http://ergoemacs.org/emacs/emacs_toggle_comment_by_line.html'
Version 2016-10-25"
  (interactive)
  (if (region-active-p)
      (comment-dwim nil)
    (let (($lbp (line-beginning-position))
          ($lep (line-end-position)))
      (if (eq $lbp $lep)
          (progn
            (comment-dwim nil))
        (if (eq (point) $lep)
            (progn
              (comment-dwim nil))
          (progn
            (comment-or-uncomment-region $lbp $lep)
            (forward-line )))))))

(map! :n "C-?" #'xah-comment-dwim)
#+END_SRC

Evil frame movements.
#+BEGIN_SRC emacs-lisp
(map!
 :n "C-h" #'evil-window-left
 :n "C-j" #'evil-window-down
 :n "C-k" #'evil-window-up
 :n "C-l" #'evil-window-right
 )
#+END_SRC

Motion training.
#+BEGIN_SRC emacs-lisp
;; (defvar ratelimited-commands nil)
;; (defvar ratelimit-delay 1)
;; (defvar ratelimit--timer nil)
;; (defun ratelimit-command (orig-fn &rest args)
;;  (let ((command this-command))
;;    (when (memq command ratelimited-commands)
;;      (user-error "Delay penalty for '%s'. Use a better motion!" command))
;;    (apply orig-fn args)
;;    (when (not (memq command ratelimited-commands))
;;     (push command ratelimited-commands))
;;    (when (timerp ratelimit--timer)
;;      (cancel-timer ratelimit--timer))
;;    (setq ratelimit--timer
;;          (run-at-time
;;           ratelimit-delay nil
;;           (lambda (cmd) (delq! cmd ratelimited-commands))
;;           command))))

;; (advice-add #'evil-next-line :around #'ratelimit-command)
;; (advice-add #'evil-previous-line :around #'ratelimit-command)
;; (advice-add #'evil-backward-char :around #'ratelimit-command)
;; (advice-add #'evil-forward-char :around #'ratelimit-command)
#+END_SRC

* Keys/Linux
#+BEGIN_SRC emacs-lisp
(when IS-LINUX
  (map!
    "s-c" (if (featurep 'evil) #'evil-yank #'copy-region-as-kill)
    "s-v" #'yank
    "s-f" #'counsel-grep-or-swiper
  )
)
#+END_SRC

* Keys/macOS
#+BEGIN_SRC emacs-lisp
(when IS-MAC
  (map!
   :gni [s-return] #'toggle-frame-fullscreen
  )
)
#+END_SRC

* Package Customisation
** org
*** Scratch buffers
#+BEGIN_SRC emacs-lisp
(setq doom-scratch-buffer-major-mode 'org-mode)
#+END_SRC

*** Dropbox-based cache folder
#+BEGIN_SRC emacs-lisp
(setq org-directory "~/Dropbox/org"
      org-archive-location "~/Dropbox/org/archive/%s_archive::")
#+END_SRC

*** Fold all on startup
#+BEGIN_SRC emacs-lisp
(setq org-startup-folded 'fold)
#+END_SRC

*** Agenda files
#+BEGIN_SRC emacs-lisp
(setq org-work-directory (concat org-directory "/work/*/")
      org-agenda-files (list org-directory
                             org-work-directory))
(setq org-log-done 'time)
#+END_SRC

*** Prettier ligatures
Prettier ellipsis and checkboxes.
#+BEGIN_SRC emacs-lisp
(setq org-ellipsis " ▼ ")

(add-hook 'org-mode-hook (lambda ()
  "Beautify Org Checkbox Symbol"
  (push '("[ ]" .  "☐") prettify-symbols-alist)
  (push '("[X]" . "☑" ) prettify-symbols-alist)
  (push '("[-]" . "❍" ) prettify-symbols-alist)
  (push '("->"  . "→" ) prettify-symbols-alist)
  (prettify-symbols-mode)))
#+END_SRC

Strikethrough checkbox.
#+BEGIN_SRC emacs-lisp
(defface org-checkbox-done-text
  '((t (:strike-through t)))
  "Face for the text part of a checked org-mode checkbox.")

(font-lock-add-keywords
 'org-mode
 `(("^[ \t]*\\(?:[-+*]\\|[0-9]+[).]\\)[ \t]+\\(\\(?:\\[@\\(?:start:\\)?[0-9]+\\][ \t]*\\)?\\[\\(?:X\\|\\([0-9]+\\)/\\2\\)\\][^\n]*\n\\)"
    1 'org-checkbox-done-text prepend))
 'append)
#+END_SRC

*** Keywords
#+BEGIN_SRC emacs-lisp
(setq
 org-todo-keywords
 '((sequence "TODO(t)" "PROG(p)" "|" "DONE(d)" "ABRT(c)")
   (sequence "[ ](T)" "[-](P)" "[?](M)" "|" "[X](D)"))
 org-todo-keyword-faces
 '(("[-]" :inherit (font-lock-constant-face bold))
   ("[?]" :inherit (warning bold))
   ("TODO" :inherit (success bold))
   ("PROG" :inherit (bold default))
   ("DONE" :inherit (warning bold))
   ("ABRT" :inherit (error bold)))
 )
#+END_SRC

*** Priorities
#+BEGIN_SRC emacs-lisp
(after! org
  (setq org-priority-faces '((?A . (:foreground "red" :weight 'bold))
                             (?B . (:foreground "orange"))
                             (?C . (:foreground "teal"))))
  (use-package! org-fancy-priorities
    :hook (org-mode . org-fancy-priorities-mode)
    :config (setq org-fancy-priorities-list '("⬆" "⬇" "☕"))
    )
  )
#+END_SRC

*** Keys
#+BEGIN_SRC emacs-lisp
(map!
 (:map org-mode-map
  :ni "<s-backspace>" #'org-babel-remove-result
  :ni [M-return] #'org-meta-return
  :ni [S-M-return] #'org-insert-todo-heading

  :i "<S-tab>" #'+org/dedent
  )
 )
#+END_SRC

** projectile
*** Known directories and search path
#+BEGIN_SRC emacs-lisp
(projectile-add-known-project "~/Dropbox/org")
(projectile-add-known-project "/etc/dotfiles")
(setq projectile-project-search-path '("~/Code/work" "~/Code/personal" "~/Code/upstream"))
#+END_SRC

** deadgrep
*** Load default bindings
#+BEGIN_SRC emacs-lisp
(use-package! deadgrep :commands (deadgrep))
#+END_SRC

** format-all
*** Disabled modes
#+BEGIN_SRC emacs-lisp
(setq +format-on-save-enabled-modes
  '(not emacs-lisp-mode
        sql-mode
        yaml-mode
        sgml-xml-mode)
  )
#+END_SRC

** company
*** Keys
#+BEGIN_SRC emacs-lisp
(use-package! company-tng
  :config
  (define-key! company-active-map
    "RET" 'company-complete-selection
    [return] 'company-complete-selection
    )
  )
#+END_SRC

** go
*** LSP
#+BEGIN_SRC emacs-lisp
(after! go-mode
  ;; language server
  (add-hook 'go-mode-hook 'lsp)

  ;; flycheck configuration
  (add-hook 'flycheck-mode-hook (lambda ()
                                  (push 'go-errcheck flycheck-disabled-checkers)
                                  (push 'go-staticcheck flycheck-disabled-checkers)
                                  (push 'go-unconvert flycheck-disabled-checkers)
                                  ;; (push 'go-build flycheck-disabled-checkers)
                                  ;; (push 'go-test flycheck-disabled-checkers)
                                  ))

  (setq flycheck-disabled-checkers '(go-unconvert
                                     go-staticcheck
                                     go-errcheck))

;; (after! lsp-mode
;;   (lsp-register-custom-settings '(("gopls.completionDocumentation" t)))
;; )
;; (lsp-register-custom-settings '(("gopls.completeUnimported" t)))
;;   (lsp-register-custom-settings '(("gopls.staticcheck" t))))
  )
#+END_SRC

*** DAP
#+BEGIN_SRC emacs-lisp
;; (setq godoc-at-point-function 'godoc-gogetdoc)
;; debugger configuration
;; (require 'dap-go)
;; (dap-go-setup)
;; (dap-mode 1)
;; (dap-ui-mode 1)
;; (dap-tooltip-mode 1)
;; (tooltip-mode 1)
#+END_SRC

*** Keys
#+BEGIN_SRC emacs-lisp
(map! :map go-mode-map
      :nv "K"  #'lsp-describe-thing-at-point
      )
#+END_SRC

** nyanmode
Oh gees.
#+BEGIN_SRC emacs-lisp
(use-package! nyan-mode
  :after doom-modeline
  :init
  (setq
    nyan-bar-length 20
    )
   (nyan-mode)
  )
#+END_SRC

** avy
*** Search across all windows
#+BEGIN_SRC emacs-lisp
(setq avy-all-windows t)
#+END_SRC

*** Select the single candidate
#+BEGIN_SRC emacs-lisp
(setq avy-single-candidate-jump t)
#+END_SRC

*** Faster timers
#+BEGIN_SRC emacs-lisp
(setq avy-timeout-seconds 0.35)
#+END_SRC

** magit
*** Git sign-off line
Automatically add a git signoff line based on discovered environmental identity.
#+BEGIN_SRC emacs-lisp
(add-hook 'git-commit-mode-hook (lambda () (apply #'git-commit-signoff (git-commit-self-ident))))
#+END_SRC

** kubectx
Switch kubectl context and namespace and display current settings in Emacs modeline.
#+BEGIN_SRC emacs-lisp
;; (use-package! kubectx-mode
  ;; :init
  ;; (setq kubectx-mode-line-string-format "")
  ;;  (setq kubectx-mode-map "")
  ;; (kubectx-mode 1)
  ;;)
#+END_SRC

** pinentry
*** Use Emacs pinentry on Linux
#+BEGIN_SRC emacs-lisp
(when IS-LINUX
    (use-package pinentry
    :demand t
    :after epg

    :config
    ;; Allow gpg-connect-agent in ssh-agent mode to forward pinentry to Emacs
    ;; since the ssh-agent protocol has no way to pass the TTY to gpg-agent.
    ;;
    ;; Also this hook has a nice effect of auto-starting gpg-agent when
    ;; needed by ssh.
    (setenv "INSIDE_EMACS" emacs-version)

    (shell-command
    "gpg-connect-agent updatestartuptty /bye"
    " *gpg-update-tty*")

    (pinentry-start))
)
#+END_SRC

** treemacs
*** Keys
Toggling.
#+BEGIN_SRC emacs-lisp
(map!
 :n "C-e" #'+treemacs/toggle
 (:map evil-treemacs-state-map "C-e" #'+treemacs/toggle)
 )
#+END_SRC

Evil frame movements.
#+BEGIN_SRC emacs-lisp
(map!
 (:map evil-treemacs-state-map
  "C-h" #'evil-window-left
  "C-l" #'evil-window-right)
 )
#+END_SRC

** easy-motion
*** Better scoped easy-motions
#+BEGIN_SRC emacs-lisp
(define-key! 'global
    [remap evilem-motion-forward-word-end] #'evilem-motion-forward-WORD-end
    [remap evilem-motion-forward-word-begin] #'evilem-motion-forward-WORD-begin
    [remap evilem-motion-backward-word-end] #'evilem-motion-backward-WORD-end
    [remap evilem-motion-backward-word-begin] #'evilem-motion-backward-WORD-begin
    )
#+END_SRC

*** Keys
#+BEGIN_SRC emacs-lisp
(map! (:after evil-easymotion :m "C-f" evilem-map))
#+END_SRC

** undotree
*** Keys
Add common Vimisms to undotree mode.
#+BEGIN_SRC emacs-lisp
(map!
 :nvi "C-z" #'undo-tree-undo
 :nvi "C-y" #'undo-tree-redo
 :nvi "C-s" #'save-buffer
 :n "u" #'undo-tree-undo
 :n "U" #'undo-tree-redo
 )
#+END_SRC

** move-text
*** Keys
Add additional evil movements for text moves.
#+BEGIN_SRC emacs-lisp
(map! :m "M-j" #'move-text-down
      :m "M-k" #'move-text-up
      :m "s-j" #'move-text-down
      :m "s-k" #'move-text-up
      )
#+END_SRC

** buffer-move
*** Keys
Add evil movements to buffer moves.
#+BEGIN_SRC emacs-lisp
(map! :m "s-J" #'buf-move-down
      :m "s-K" #'buf-move-up
      :m "s-H" #'buf-move-left
      :m "s-L" #'buf-move-right
      :m "M-J" #'buf-move-down
      :m "M-K" #'buf-move-up
      :m "M-H" #'buf-move-left
      :m "M-L" #'buf-move-right
      )
#+END_SRC

** buffer-expose
*** Disable scaling
#+BEGIN_SRC emacs-lisp
(setq-default buffer-expose-rescale-factor 1)
#+END_SRC

*** Workspace expose functions
#+BEGIN_SRC emacs-lisp
(defun buffer-workspace-expose (&optional max)
  "Expose workspace buffers.
If MAX is given it determines the maximum number of windows to
show per page, which defaults to `buffer-expose-max-num-windows'."
  (interactive "P")
  (buffer-expose-show-buffers (projectile-project-buffers) max nil))

(defun buffer-workspace-vterm-expose (&optional max)
  "Expose vterm workspace buffers.
If MAX is given it determines the maximum number of windows to
show per page, which defaults to
`buffer-expose-max-num-windows'."
  (interactive "P")
  (buffer-expose-show-buffers
   (projectile-project-buffers) max '("\\`[^vterm]")))
#+END_SRC

*** Keys
Add evil movements to expose view.
#+BEGIN_SRC emacs-lisp
;; NOTE: backtab doesn't work
;;(def-package! buffer-expose
;;  :init (general-define-key
;;         :keymaps 'buffer-expose-grid-map
;;         "<backtab>" 'buffer-expose-prev-page
;;         "h" 'buffer-expose-left-window
;;         "k" 'buffer-expose-up-window
;;         "j" 'buffer-expose-down-window
;;         "l" 'buffer-expose-right-window
;;         "m" 'buffer-expose-choose)
;;  :config (buffer-expose-mode 1))
#+END_SRC

Add expose functions to buffer commands.
#+BEGIN_SRC emacs-lisp
(map! :leader
      :desc "Expose buffers" "be" #'buffer-expose
      :desc "Expose workspace buffers" "bw" #'buffer-workspace-expose
      :desc "Expose workspace vterm buffers" "bv" #'buffer-workspace-vterm-expose
      )
#+END_SRC

** vterm
Use system-wide vterm lib when compiling.
#+BEGIN_SRC emacs-lisp
(setq vterm-module-cmake-args "-DUSE_SYSTEM_LIBVTERM=yes")
#+END_SRC

*** Mode handling
Handle escape between Emacs and vterm.
#+BEGIN_SRC emacs-lisp
(defun evil-collection-vterm-toggle-send-escape-ins ()
  "Toggle where ESC is sent between `vterm' and `emacs'.
This is needed for programs that use ESC, e.g. vim or an ssh'd emacs that
also uses `evil-mode'. This version sends a `vterm' INS when in `emacs'."
  (interactive)
  (if evil-collection-vterm-send-escape-to-vterm-p
      (evil-collection-define-key 'insert 'vterm-mode-map (kbd "<escape>")
        (lookup-key evil-insert-state-map (kbd "<escape>"))
        (evil-escape))
    (evil-collection-define-key 'insert 'vterm-mode-map
      (kbd "<escape>") 'vterm--self-insert)
    (evil-insert-state))
  (setq evil-collection-vterm-send-escape-to-vterm-p
        (not evil-collection-vterm-send-escape-to-vterm-p))
  (message (format "Sending ESC to %s."
                   (if evil-collection-vterm-send-escape-to-vterm-p
                       "vterm"
                     "emacs"))))

(defun evil-collection-vterm-send-escape-emacs ()
  "Send ESC to `emacs' when in `vterm'."
  (interactive)
  (when (and
         (eq major-mode 'vterm-mode)
         evil-collection-vterm-send-escape-to-vterm-p
         )
    (evil-collection-define-key 'insert 'vterm-mode-map (kbd "<escape>")
      (lookup-key evil-insert-state-map (kbd "<escape>"))
      (evil-escape)
      (setq evil-collection-vterm-send-escape-to-vterm-p nil)
      (message "Sending ESC to emacs.")))
  )

(defun evil-collection-vterm-send-escape-vterm ()
  "Send ESC to `vterm' when in `emacs'."
  (interactive)
  (when (and
         (eq major-mode 'vterm-mode)
         (not evil-collection-vterm-send-escape-to-vterm-p)
         )
    (evil-collection-define-key 'insert 'vterm-mode-map
      (kbd "<escape>") 'vterm--self-insert)
    (setq evil-collection-vterm-send-escape-to-vterm-p t)
    (message "Sending ESC to vterm.")
    )
  )

(defun vterm-exit-visual-insert ()
  "Send evil-insert after exiting visual state."
  (interactive)
  (when (or
         (evil-visual-state-p)
         (evil-normal-state-p))
    (evil-exit-visual-state)
    (evil-insert-state 1)
    )
  )

(add-hook 'evil-insert-state-entry-hook #'evil-collection-vterm-send-escape-vterm)
#+END_SRC

Copy mode entering and exiting.
#+BEGIN_SRC emacs-lisp
(defun vterm-copy-mode-done-ins ()
  "Save active region to kill ring, insert and exit `vterm-copy-mode'."
  (interactive)
  (if (region-active-p)
    (kill-ring-save (region-beginning) (region-end)))
  (vterm-exit-visual-insert)
  (vterm-copy-mode -1))
(advice-add 'vterm-copy-mode-done :override #'vterm-copy-mode-done-ins)
(add-hook 'vterm-copy-mode-hook (lambda () (if vterm-copy-mode (evil-escape))))
#+END_SRC

*** Prompt Outlines
#+BEGIN_SRC emacs-lisp
(setq-hook! 'vterm-mode-hook outline-regexp "^[a-zA-Z.\/~❮]*[ ]*λ.*")
(map!
 (:map vterm-copy-mode-map
  :m "[[" #'outline-previous-heading
  :m "]]" #'outline-next-heading
  :vnm "<tab>" #'outline-toggle-children
  )
 )
#+END_SRC

*** Scroll
Scrollback limit.
#+BEGIN_SRC emacs-lisp
(setq-default vterm-max-scrollback 9999)
#+END_SRC

Allow stop scroll term sequence.
#+BEGIN_SRC emacs-lisp
(defun vterm-disable-output ()
  (interactive)
  (unless (evil-normal-state-p)
    (evil-normal-state))
  (vterm-send-key "s" nil nil t))
#+END_SRC

*** Popups
#+BEGIN_SRC emacs-lisp
(set-popup-rule! "^vterm" :size 0.30 :vslot -4 :select t :quit nil :ttl 0)
(defun +vterm/toggle (arg)
  "Toggles a terminal popup window at project root.
If prefix ARG is non-nil, recreate vterm buffer in the current project's root."
  (interactive "P")
  (unless (fboundp 'module-load)
    (user-error "Your build of Emacs lacks dynamic modules support and cannot load vterm"))
  (let ((buffer-name
         (format "vterm:%s"
                 (if (bound-and-true-p persp-mode)
                     (safe-persp-name (get-current-persp))
                   "main")))
        confirm-kill-processes
        current-prefix-arg)
    (when arg
      (let ((buffer (get-buffer buffer-name))
            (window (get-buffer-window buffer-name)))
        (when (buffer-live-p buffer)
          (kill-buffer buffer))
        (when (window-live-p window)
          (delete-window window))))
    (if-let (win (get-buffer-window buffer-name))
        (if (eq (selected-window) win)
            (delete-window win)
          (select-window win)
          (when (bound-and-true-p evil-local-mode)
            (evil-change-to-initial-state))
          (goto-char (point-max)))
      (require 'vterm)
      (setenv "PROOT" (or (doom-project-root) default-directory))
      (let ((buffer (get-buffer-create buffer-name)))
        (with-current-buffer buffer
          (doom-mark-buffer-as-real-h)
          (hide-mode-line-mode)
          (remove-hook 'doom-escape-hook #'+popup-close-on-escape-h)
          (unless (eq major-mode 'vterm-mode)
            (vterm-mode)))
        (pop-to-buffer buffer)))))
#+END_SRC

Toggling vterms.
#+BEGIN_SRC emacs-lisp
(defun +vterm/herealways (arg)
  "Open a terminal buffer in the current window at project root.
If prefix ARG is non-nil, cd into `default-directory' instead of project root."
  (interactive "P")
  (require 'vterm)
  ;; This hack forces vterm to redraw, fixing strange artefacting in the tty.
  (save-window-excursion
    (pop-to-buffer "*scratch*"))
  (let ((default-directory
          (if arg
              default-directory
            (or (doom-project-root) default-directory))))
    (vterm)))

(map!
 :vgni "s-;" #'+vterm/here
 :vgni "s-:" #'+vterm/toggle
 )
#+END_SRC

*** Titles
#+BEGIN_SRC emacs-lisp
(setq vterm-buffer-name-string "vterm: %s")
#+END_SRC

*** Keys
Miscellaneous vterm bindings.
#+BEGIN_SRC emacs-lisp
(map!
 (:map vterm-mode-map
  ;; Evil yank when selecting.
  :mnv "y" #'evil-yank

  ;; Entering/exiting modes.
  :vn "o" #'evil-insert
  :vn "a" #'evil-insert
  :vn "<return>" #'vterm-exit-visual-insert
  :vni "C-SPC" #'vterm-copy-mode

  ;; Stop scrolling.
  :vni "C-s" #'vterm-disable-output

  ;; Fix shift-space vterm ';2u' artefact.
  :i "S-SPC" "SPC"

  ;; Term sequences.
  :i "C-c" #'vterm-send-C-c
  :i "C-z" #'vterm-send-C-z
  )
 )
#+END_SRC

Fix escape for vterm.
#+BEGIN_SRC emacs-lisp
(setq evil-collection-key-blacklist
      (list "C-w" "C-j" "C-k" "gd" "gf" "K" "[" "]" "gz"
            doom-leader-key doom-localleader-key
            doom-leader-alt-key doom-localleader-alt-key))
#+END_SRC

Evil frame movements.
#+BEGIN_SRC emacs-lisp
(map!
 (:map vterm-copy-mode-map
   :i "C-h" #'evil-window-left
   :i "C-j" #'evil-window-down
   :i "C-k" #'evil-window-up
   :i "C-l" #'evil-window-right)

 (:map vterm-mode-map
   :nvi "C-w" evil-window-map
   :i "C-h" #'evil-window-left
   :i "C-j" #'vterm--self-insert
   :i "C-k" #'vterm--self-insert
   :i "C-l" #'evil-window-right)
 )
#+END_SRC

Pass frame movements through to Emacs.
#+BEGIN_SRC emacs-lisp
(use-package! vterm
  :defer t
  :init
  (setq vterm-module-cmake-args "-DUSE_SYSTEM_LIBVTERM=yes")
  :config
  (add-to-list 'vterm-keymap-exceptions "C-w"))
#+END_SRC
