"
" plugins (requires dein to be installed)
"
if &compatible
  set nocompatible
endif
set runtimepath+=$HOME/.vim/dein/repos/github.com/Shougo/dein.vim

if dein#load_state('$HOME/.vim/dein')
  call dein#begin('$HOME/.vim/dein')

  call dein#add('mhinz/vim-startify')
  call dein#add('chriskempson/base16-vim')

  call dein#add('Shougo/neocomplete.vim')
  call dein#add('Shougo/neosnippet.vim')
  call dein#add('Shougo/neosnippet-snippets')
  call dein#add('Shougo/denite.nvim')

  call dein#add('junegunn/fzf', { 'build': './install --all', 'merged': 0 }) 
  call dein#add('junegunn/fzf.vim', { 'depends': 'fzf' })
  call dein#add('junegunn/goyo.vim')
  call dein#add('junegunn/limelight.vim')
  
  call dein#end()
  call dein#save_state()
endif

"
" system functions
"
silent function! OSX()
	return has('macunix')
endfunction
silent function! NIX()
	return has('unix') && !has('macunix') && !has('win32unix')
endfunction
silent function! WIN()
	return  (has('win16') || has('win32') || has('win64'))
endfunction
if (OSX() || NIX())
  cmap w!! w !sudo tee % >/dev/null
endif

"
" vim settings
"
let mapleader = ","

syntax enable
syntax sync minlines=256
filetype plugin indent on

set shell=bash\ -i
set synmaxcol=200
set lazyredraw
set relativenumber
"set termguicolors
set mouse=a
set noswapfile
set nobackup
set tabpagemax=100
set autochdir
set ignorecase
set smartcase
set scrolloff=10
set sidescrolloff=15
set sidescroll=1
set encoding=utf-8

scriptencoding utf-8

set autoindent
set smartindent
set smarttab
set expandtab
set shiftwidth=4
set softtabstop=4
set tabstop=4

autocmd Filetype html,ruby,yaml setlocal ts=2 sts=2 sw=2
autocmd FileType latex,tex,md,markdown,text setlocal spell spelllang=en_au

"
" vim mappings
"
" saving and quitting
noremap <leader>q :q<cr>
nnoremap <leader>w :w<cr>
" clear search with <leader>/
nmap <silent><leader>/ :nohlsearch<cr>
" yank from cursor to EOL
nnoremap Y y$
" stop cursor jumping around while joining lines
nnoremap J mzJ`z
" center after searching
nnoremap n nzz
nnoremap } }zz
nnoremap N Nzz
" enter to bottom, Backspace to top, 12<enter> to 12th line
nnoremap <CR> G
nnoremap <BS> gg

"
" plugin settings
"

" neocomplete
let g:neocomplete#enable_at_startup = 1
let g:neocomplete#enable_smart_case = 1
let g:neocomplete#sources#syntax#min_keyword_length = 3
inoremap <expr><C-g> neocomplete#undo_completion()
inoremap <expr><C-l> neocomplete#complete_common_string()

" neosnippet
imap <C-k>     <Plug>(neosnippet_expand_or_jump)
smap <C-k>     <Plug>(neosnippet_expand_or_jump)
xmap <C-k>     <Plug>(neosnippet_expand_target)
smap <expr><TAB> neosnippet#expandable_or_jumpable() ?
\ "\<Plug>(neosnippet_expand_or_jump)" : "\<TAB>"

" goyo and limelight
noremap <c-g> :Goyo<cr>
function! s:goyo_enter()
  set noshowmode
  set noshowcmd
  set scrolloff=999
  Limelight
endfunction
function! s:goyo_leave()
  set showmode
  set showcmd
  set scrolloff=5
  Limelight!
  hi LineNr guibg=bg
  set foldcolumn=2
  hi foldcolumn guibg=bg
  hi VertSplit guibg=bg guifg=bg
endfunction
augroup goyo_map
  autocmd! User GoyoEnter nested call <SID>goyo_enter()
  autocmd! User GoyoLeave nested call <SID>goyo_leave()
augroup END

" fzf
let g:fzf_command_prefix = 'Fzf'
nmap <leader>n :FzfBuffers<cr>
nmap <leader>m :FzfFiles<cr>

" denite

"nmap <leader>n :CtrlPBuffer<cr>
"nmap <leader>m :CtrlPMRU<cr>
"nmap <leader>gt :GoDef<cr>
"nmap ]h <Plug>GitGutterNextHunk
"nmap [h <Plug>GitGutterPrevHunk
"noremap <c-f> :TagbarToggle<cr>
"noremap <c-g> :Goyo<cr>

"map <silent> <c-e> :NERDTreeToggle %:p:h<cr>
"map <leader>e :NERDTreeToggle %:p:h<cr>
"map <leader>r :NERDTreeFind<cr>
"" Close buffer
"nmap <leader>x :BD<cr>

"
" colours
"
if filereadable(expand("$HOME/.base16_vimrc"))
    so $HOME/.base16_vimrc
else
    set background=dark
    colorscheme base16-default
endif
hi LineNr guibg=bg
set foldcolumn=2
hi foldcolumn guibg=bg
hi VertSplit guibg=bg guifg=bg

"
" gui
"
if has('gui_running')
  autocmd! GUIEnter * set vb t_vb=
  set mousehide
  set guioptions=
  set guicursor+=a:blinkon0

  if WIN()
    au GUIEnter * simalt ~x
    map <F11> <Esc>:call libcallnr("gvimfullscreen.dll", "ToggleFullScreen", 0)<CR>
    so $VIMRUNTIME/mswin.vim
    set guifont=DejaVu_Sans_Mono_for_Powerline:h10:cANSI
elseif (OSX() || NIX())
    if OSX()
        "    set guifont=Inconsolata\ for\ Powerline:h13
        set guioptions-=L
        map <D-CR> :set invfu<CR>
        "set fu
        set clipboard=unnamed
    endif
  endif
endif

"
" local settings
"
if filereadable(expand("$HOME/.vimrc.local"))
  so $HOME/.vimrc.local
endif

"
" check plugin updates
"
if dein#check_install()
  call dein#install()
endif
